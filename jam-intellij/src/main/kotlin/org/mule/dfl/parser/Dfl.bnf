{
  parserClass="org.mule.dfl.parser.DflParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="Dfl"
  psiImplClassSuffix="Impl"
  psiPackage="org.mule.dfl.parser.psi"
  psiImplPackage="org.mule.dfl.parser.psi.impl"
  elementTypeHolderClass="org.mule.dfl.parser.psi.DflTypes"
  elementTypeClass="org.mule.dfl.parser.DflElementType"
  tokenTypeClass="org.mule.dfl.parser.DflTokenType"

  tokens = [
        L_PARREN='('
        R_PARREN=')'
        L_CURLY='{'
        R_CURLY='}'
        L_BRACKET='['
        R_BRACKET=']'
        DOT='.'
        COMMA=','
        COLON=': '
        LINE_COMMENT='regexp:#.*'
        DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
        SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"
        NUMBER='regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'
        TRUE='regexp:\strue\s'
        FALSE='regexp:\sfalse\s'
        NULL='regexp:\snull\s'
        //KeyWords
        MAP='regexp:\smap\s'
        ORDER_BY='regexp:\sorderBy\s'
        GROUP_BY='regexp:\sgroupBy\s'
        WHERE='regexp:\swhere\s'
        DISTINCT_BY='regexp:\sdistinctBy\s'
        WHEN='regexp:\swhen\s'
        OTHERWISE='regexp:\sotherwise\s'
        AS='regexp:\sas\s'
        IS='regexp:\sis\s'
        STARTS_WITH='regexp:\sstartsWith\s'
        ENDS_WITH='regexp:\sendsWith\s'
        MATCHES='regexp:\smatches\s'
        CONTAINS='regexp:\scontains\s'
        LOWER='regexp:lower\s'
        UPPER='regexp:upper\s'
        SPLIT='regexp:split\s'
        TRIM='regexp:trim\s'
        MATCH='regexp:\smatch\s'
        SIZE_OF='regexp:sizeOf\s'
        FIND='regexp:\sfind\s'
        SCAN='regexp:\sscan\s'
        //
        NULL='null'
        VERSION="regexp:%dfl[0-9]+\.[0-9]+"
        DOCUMENT_SEPARATOR="---"
        OUTPUT='regexp:%output[ a-z]+'
        // Actually not defined in RFC 4627, but may be used for JSON5 and helps with
        // auto completion of keywords.
        VARIABLE='regexp:\$[a-z0-9A-Z_-]*'
        VARIABLE_DEF='regexp:\&[a-z0-9A-Z_-]+'
        TYPE='regexp::[a-z0-9A-Z_-]+'
        ID='regexp:[a-z0-9A-Z_-]+'
  ]

   extends(".*expr")=expression

}


//document ::= [header] expression | comment_expr
document ::= [header] value | comment_expr

value ::= expression | data_structure

//expression rule
expression ::= add_group
  | mul_group
  | unary_group
  | ref_expr
  | primary_group
  | comment_expr

data_structure ::= array | object_group {name="Data Structure"}

// private rules to define operators with the same priority
private unary_group ::= unary_plus_expr | unary_min_expr
private mul_group ::= mul_expr | div_expr
private add_group ::= plus_expr | minus_expr
private primary_group ::= simple_ref_expr | literal_group | paren_expr
private literal_group ::= string_expr | bool_expr | number_expr


private object_group ::=  (single_object | object)

unary_min_expr ::= '-' exp  ression
unary_plus_expr ::= '+' expression
div_expr ::= expression '/' expression
mul_expr ::= expression '*' expression
minus_expr ::= expression '-' expression
plus_expr ::= expression '+' expression
paren_expr ::= '(' expression ')'
simple_ref_expr ::= VARIABLE
ref_expr ::= expression '.' identifier
identifier ::= ID
number_expr ::= NUMBER
string_expr ::=  DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING
bool_expr ::= TRUE | FALSE
comment_expr ::=  LINE_COMMENT {name="Comment"}

array ::= L_BRACKET [!']' value (!']' "," value) *] R_BRACKET {pin(".*")=1 recoverWhile=recover name="Array"}
//Object
object ::= L_CURLY [!'}' complex_prop (!'}' ',' complex_prop) *] R_CURLY {pin(".*")=1 recoverWhile=recover name="Object"}

single_object ::= complex_prop  {name="Object"}

simple_prop ::= simple_key COLON value
complex_prop ::= complex_key COLON value
//Key
simple_key::= primary_group  {name="Key"}
complex_key ::= primary_group [attributes]  {name="Key"}
attributes ::= "@(" [ !')' simple_prop ( !')' ',' simple_prop) * ] ')' {pin(".*")=1}

//Additionals
private recover ::= !(',' |')' | '(' | ']' | '}' | '[' | '{')


header ::= (comment_expr | VERSION | OUTPUT)+ DOCUMENT_SEPARATOR {name="Header"}
