/* The following code was generated by JFlex 1.4.3 on 1/5/15 5:55 PM */

package org.mule.dfl.parser;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static org.mule.dfl.parser.psi.DflTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/5/15 5:55 PM from the specification file
 * <tt>/Users/machaval/labs/repos/intellij-plugins/jam-intellij/src/main/kotlin/org/mule/dfl/parser/_DflLexer.flex</tt>
 */
public class _DflLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\16\1\3\1\1\22\0\1\50\1\0\1\5"+
    "\1\4\1\51\1\46\1\53\1\7\1\55\1\56\1\0\1\15\1\63"+
    "\1\10\1\13\1\0\1\11\11\12\1\54\6\0\1\52\1\33\2\52"+
    "\1\14\11\52\1\45\7\52\1\43\3\52\1\61\1\6\1\62\1\0"+
    "\1\52\1\0\1\24\1\47\1\42\1\32\1\22\1\23\1\35\1\37"+
    "\1\40\2\47\1\25\1\27\1\41\1\31\1\30\1\47\1\20\1\26"+
    "\1\17\1\21\1\47\1\36\1\64\1\34\1\44\1\57\1\0\1\60"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\6\1\1\3\6\1\1\1\11\2\1\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\2\16\0"+
    "\1\4\2\0\1\5\1\6\1\0\1\7\3\6\2\0"+
    "\1\21\1\22\1\23\23\0\1\24\3\7\1\6\1\25"+
    "\1\6\10\0\1\26\14\0\1\27\1\0\1\7\1\6"+
    "\1\30\16\0\1\31\7\0\1\6\2\0\1\32\1\33"+
    "\3\0\1\34\4\0\1\35\6\0\1\36\1\0\1\6"+
    "\2\0\1\37\1\0\1\40\1\41\1\0\1\42\1\0"+
    "\1\43\5\0\1\44\1\0\1\45\1\0\1\46\2\0"+
    "\1\47\6\0\1\50\2\0\1\51\1\0\1\52\1\0"+
    "\1\53\1\0\1\54\3\0\1\55\1\0\1\56\1\0"+
    "\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\65\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b"+
    "\0\u06a0\0\65\0\u06d5\0\u070a\0\65\0\u073f\0\u0774\0\u07a9"+
    "\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u0350\0\u08e7\0\65"+
    "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f"+
    "\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37"+
    "\0\u0c6c\0\u0ca1\0\u0cd6\0\u01dd\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u01dd\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d"+
    "\0\u0f52\0\u0f87\0\65\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090"+
    "\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\65"+
    "\0\u1238\0\u126d\0\u12a2\0\u01dd\0\u12d7\0\u130c\0\u1341\0\u1376"+
    "\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e"+
    "\0\u1553\0\u1588\0\65\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691"+
    "\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\65\0\65\0\u17cf"+
    "\0\u1804\0\u1839\0\65\0\u186e\0\u18a3\0\u18d8\0\u190d\0\65"+
    "\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\65\0\u1a80"+
    "\0\u1ab5\0\u1aea\0\u1b1f\0\65\0\u1b54\0\65\0\65\0\u1b89"+
    "\0\65\0\u1bbe\0\65\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7"+
    "\0\65\0\u1cfc\0\u01dd\0\u1d31\0\u1b1f\0\u1d66\0\u1d9b\0\65"+
    "\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1d31\0\u1f0e"+
    "\0\u1f43\0\65\0\u1f78\0\65\0\u1fad\0\65\0\u1fe2\0\65"+
    "\0\u2017\0\u204c\0\u2081\0\65\0\u20b6\0\65\0\u20eb\0\65"+
    "\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\2\1\14\1\13\1\15\1\13"+
    "\1\16\16\13\1\17\4\13\1\20\1\13\1\3\1\21"+
    "\1\13\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\13\66\0\3\33\13\0\1\34\1\0"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\0"+
    "\1\44\1\45\2\0\1\46\1\47\1\0\1\50\1\0"+
    "\1\51\5\0\1\33\14\0\2\4\1\0\62\4\1\5"+
    "\2\0\2\5\1\52\1\53\56\5\1\6\2\0\3\6"+
    "\1\54\1\55\55\6\10\0\1\56\1\10\1\11\1\0"+
    "\1\13\2\0\27\13\1\0\1\13\2\0\1\13\11\0"+
    "\1\13\10\0\3\13\1\57\1\60\2\0\3\13\1\60"+
    "\23\13\1\0\1\13\2\0\1\13\11\0\1\13\10\0"+
    "\1\13\2\11\1\57\1\60\2\0\3\13\1\60\23\13"+
    "\1\0\1\13\2\0\1\13\11\0\1\13\10\0\3\13"+
    "\1\0\1\13\2\0\27\13\1\0\1\13\2\0\1\13"+
    "\11\0\1\13\17\0\1\34\1\0\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\0\1\44\1\45\2\0"+
    "\1\46\1\47\1\0\1\50\1\0\1\51\32\0\3\13"+
    "\1\0\1\13\2\0\3\13\1\61\23\13\1\0\1\13"+
    "\2\0\1\13\11\0\1\13\10\0\3\13\1\0\1\13"+
    "\2\0\27\13\1\0\1\13\2\0\1\13\11\0\1\62"+
    "\10\0\3\13\1\0\1\13\2\0\2\13\1\63\24\13"+
    "\1\0\1\13\2\0\1\13\11\0\1\13\31\0\1\64"+
    "\1\65\42\0\3\21\1\0\1\21\2\0\27\21\1\0"+
    "\1\21\2\0\1\21\11\0\1\21\10\0\3\66\1\0"+
    "\1\66\2\0\27\66\1\0\1\66\2\0\1\66\11\0"+
    "\1\66\10\0\3\67\1\0\1\67\2\0\27\67\1\0"+
    "\1\67\1\70\1\0\1\67\11\0\1\67\1\0\3\33"+
    "\44\0\1\33\34\0\1\71\74\0\1\72\75\0\1\73"+
    "\47\0\1\74\13\0\1\75\52\0\1\76\67\0\1\77"+
    "\52\0\1\100\10\0\1\101\7\0\1\102\1\0\1\103"+
    "\46\0\1\104\57\0\1\105\1\106\104\0\1\107\44\0"+
    "\1\110\103\0\1\111\53\0\1\112\67\0\1\113\33\0"+
    "\1\5\2\0\62\5\1\6\2\0\62\6\10\0\1\114"+
    "\2\13\1\0\1\13\2\0\27\13\1\0\1\13\2\0"+
    "\1\13\11\0\1\13\11\0\2\115\62\0\3\116\1\0"+
    "\1\13\1\117\1\0\27\13\1\0\1\13\2\0\1\13"+
    "\11\0\1\13\10\0\3\13\1\0\1\13\2\0\7\13"+
    "\1\120\17\13\1\0\1\13\2\0\1\13\11\0\1\13"+
    "\10\0\3\13\1\0\1\13\2\0\11\13\1\121\15\13"+
    "\1\0\1\13\2\0\1\13\11\0\1\13\10\0\3\13"+
    "\1\0\1\13\2\0\6\13\1\122\20\13\1\0\1\13"+
    "\2\0\1\13\11\0\1\13\21\0\1\123\66\0\1\124"+
    "\51\0\3\67\1\0\1\67\2\0\27\67\1\0\1\67"+
    "\2\0\1\67\11\0\1\67\21\0\1\125\16\0\1\126"+
    "\54\0\1\127\66\0\1\130\57\0\1\131\100\0\1\132"+
    "\24\0\3\133\12\0\1\133\31\0\1\133\52\0\1\134"+
    "\52\0\1\135\65\0\1\136\103\0\1\137\44\0\1\140"+
    "\57\0\1\141\10\0\1\142\73\0\1\143\57\0\1\144"+
    "\60\0\1\145\67\0\1\146\55\0\1\147\43\0\3\150"+
    "\12\0\1\150\31\0\1\150\55\0\1\151\34\0\2\115"+
    "\1\0\1\152\5\0\1\152\52\0\1\13\2\116\1\0"+
    "\1\13\2\0\27\13\1\0\1\13\2\0\1\13\11\0"+
    "\1\13\11\0\2\117\62\0\3\13\1\0\1\13\2\0"+
    "\7\13\1\153\17\13\1\0\1\13\2\0\1\13\11\0"+
    "\1\13\10\0\3\13\1\0\1\13\2\0\6\13\1\154"+
    "\20\13\1\0\1\13\2\0\1\13\11\0\1\13\17\0"+
    "\1\155\72\0\1\156\61\0\1\157\71\0\1\160\57\0"+
    "\1\161\70\0\1\162\64\0\1\163\70\0\1\164\54\0"+
    "\1\165\62\0\1\166\104\0\1\167\46\0\1\170\103\0"+
    "\1\171\65\0\1\172\23\0\3\173\12\0\1\173\31\0"+
    "\1\173\36\0\1\174\64\0\1\175\61\0\1\176\66\0"+
    "\1\177\63\0\1\200\20\0\1\201\42\0\1\202\55\0"+
    "\3\117\2\0\1\117\57\0\3\13\1\0\1\13\2\0"+
    "\21\13\1\203\5\13\1\0\1\13\2\0\1\13\11\0"+
    "\1\13\30\0\1\204\45\0\2\205\53\0\3\206\12\0"+
    "\1\206\31\0\1\206\15\0\3\207\12\0\1\207\31\0"+
    "\1\207\34\0\1\210\107\0\1\211\43\0\1\212\43\0"+
    "\3\213\12\0\1\213\31\0\1\213\34\0\1\214\63\0"+
    "\1\215\64\0\1\216\112\0\1\217\20\0\3\220\12\0"+
    "\1\220\31\0\1\220\53\0\1\221\45\0\1\222\64\0"+
    "\1\223\104\0\1\224\54\0\1\225\56\0\1\226\43\0"+
    "\3\227\12\0\1\227\31\0\1\227\40\0\1\230\50\0"+
    "\3\13\1\0\1\13\2\0\12\13\1\231\14\13\1\0"+
    "\1\13\2\0\1\13\11\0\1\13\21\0\1\232\54\0"+
    "\2\205\1\233\52\0\3\234\12\0\1\234\31\0\1\234"+
    "\54\0\1\235\25\0\3\236\12\0\1\236\31\0\1\236"+
    "\15\0\3\237\12\0\1\237\31\0\1\237\42\0\1\240"+
    "\37\0\3\241\12\0\1\241\31\0\1\241\37\0\1\242"+
    "\42\0\3\243\12\0\1\243\3\0\1\244\25\0\1\243"+
    "\52\0\1\245\61\0\1\246\72\0\1\247\56\0\1\250"+
    "\32\0\3\251\12\0\1\251\31\0\1\251\54\0\1\252"+
    "\34\0\3\13\1\0\1\13\2\0\22\13\1\253\4\13"+
    "\1\0\1\13\2\0\1\13\11\0\1\13\17\0\1\254"+
    "\56\0\2\255\71\0\1\256\110\0\1\257\22\0\3\260"+
    "\12\0\1\260\31\0\1\260\42\0\1\261\76\0\1\262"+
    "\60\0\1\263\72\0\1\264\56\0\1\265\71\0\1\266"+
    "\42\0\14\267\1\0\7\267\1\0\1\267\2\0\2\267"+
    "\13\0\1\267\37\0\1\270\65\0\1\271\25\0\3\272"+
    "\12\0\1\272\31\0\1\272\42\0\1\273\37\0\3\274"+
    "\12\0\1\274\31\0\1\274\33\0\1\275\46\0\3\276"+
    "\12\0\1\276\31\0\1\276\42\0\1\277\37\0\3\300"+
    "\12\0\1\300\31\0\1\300\33\0\1\301\67\0\1\302"+
    "\75\0\1\303\32\0\3\304\12\0\1\304\31\0\1\304"+
    "\53\0\1\305\26\0\3\306\12\0\1\306\31\0\1\306"+
    "\50\0\1\307\31\0\3\310\12\0\1\310\31\0\1\310"+
    "\15\0\3\311\12\0\1\311\31\0\1\311\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\11\1\7\11\1\1\16\0"+
    "\1\11\2\0\1\11\1\1\1\0\4\1\2\0\2\1"+
    "\1\11\23\0\7\1\10\0\1\11\14\0\1\11\1\0"+
    "\3\1\16\0\1\11\7\0\1\1\2\0\2\11\3\0"+
    "\1\11\4\0\1\11\6\0\1\11\1\0\1\1\2\0"+
    "\1\11\1\0\2\11\1\0\1\11\1\0\1\11\5\0"+
    "\1\11\1\0\1\1\1\0\1\1\2\0\1\11\6\0"+
    "\1\1\2\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\3\0\1\11\1\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _DflLexer() {
    this((java.io.Reader)null);
  }


  public _DflLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _DflLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { return DISTINCT_BY;
          }
        case 49: break;
        case 9: 
          { return VARIABLE;
          }
        case 50: break;
        case 21: 
          { return EXP;
          }
        case 51: break;
        case 41: 
          { return MATCHES;
          }
        case 52: break;
        case 5: 
          { return SINGLE_QUOTED_STRING;
          }
        case 53: break;
        case 46: 
          { return OTHERWISE;
          }
        case 54: break;
        case 35: 
          { return MATCH;
          }
        case 55: break;
        case 28: 
          { return FIND;
          }
        case 56: break;
        case 42: 
          { return ORDER_BY;
          }
        case 57: break;
        case 13: 
          { return R_CURLY;
          }
        case 58: break;
        case 34: 
          { return SPLIT;
          }
        case 59: break;
        case 15: 
          { return R_BRACKET;
          }
        case 60: break;
        case 17: 
          { return VARIABLE_DEF;
          }
        case 61: break;
        case 47: 
          { return STARTS_WITH;
          }
        case 62: break;
        case 38: 
          { return VERSION;
          }
        case 63: break;
        case 7: 
          { return NUMBER;
          }
        case 64: break;
        case 18: 
          { return TYPE;
          }
        case 65: break;
        case 11: 
          { return R_PARREN;
          }
        case 66: break;
        case 32: 
          { return FALSE;
          }
        case 67: break;
        case 29: 
          { return SCAN;
          }
        case 68: break;
        case 16: 
          { return COMMA;
          }
        case 69: break;
        case 8: 
          { return DOT;
          }
        case 70: break;
        case 36: 
          { return WHERE;
          }
        case 71: break;
        case 37: 
          { return RESSION;
          }
        case 72: break;
        case 19: 
          { return COLON;
          }
        case 73: break;
        case 24: 
          { return NULL;
          }
        case 74: break;
        case 33: 
          { return LOWER;
          }
        case 75: break;
        case 43: 
          { return GROUP_BY;
          }
        case 76: break;
        case 20: 
          { return DOCUMENT_SEPARATOR;
          }
        case 77: break;
        case 39: 
          { return SIZE_OF;
          }
        case 78: break;
        case 40: 
          { return OUTPUT;
          }
        case 79: break;
        case 3: 
          { return LINE_COMMENT;
          }
        case 80: break;
        case 27: 
          { return TRIM;
          }
        case 81: break;
        case 6: 
          { return ID;
          }
        case 82: break;
        case 12: 
          { return L_CURLY;
          }
        case 83: break;
        case 22: 
          { return AS;
          }
        case 84: break;
        case 45: 
          { return CONTAINS;
          }
        case 85: break;
        case 10: 
          { return L_PARREN;
          }
        case 86: break;
        case 44: 
          { return ENDS_WITH;
          }
        case 87: break;
        case 23: 
          { return IS;
          }
        case 88: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 89: break;
        case 30: 
          { return WHEN;
          }
        case 90: break;
        case 26: 
          { return TRUE;
          }
        case 91: break;
        case 14: 
          { return L_BRACKET;
          }
        case 92: break;
        case 31: 
          { return UPPER;
          }
        case 93: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 94: break;
        case 25: 
          { return MAP;
          }
        case 95: break;
        case 4: 
          { return DOUBLE_QUOTED_STRING;
          }
        case 96: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
